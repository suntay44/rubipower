<!-- View Modal -->
<div id="viewModal" class="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full z-[9999]" style="display: none; position: fixed !important; top: 0 !important; left: 0 !important; right: 0 !important; bottom: 0 !important;">
  <div class="relative top-20 mx-auto p-5 border w-11/12 md:w-3/4 lg:w-1/2 shadow-lg rounded-md bg-white" style="position: relative !important;">
    <div class="mt-3">
      <div class="flex items-center justify-between mb-4">
        <h3 class="text-lg font-medium text-gray-900">Purchase Request Details</h3>
        <button onclick="closeViewModal()" class="text-gray-400 hover:text-gray-600">
          <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
          </svg>
        </button>
      </div>
      
      <div id="viewModalContent" class="space-y-4">
        <!-- Content will be populated by JavaScript -->
      </div>
      
      <div class="flex items-center justify-end space-x-3 mt-6">
        <button onclick="closeViewModal()" class="bg-gray-300 hover:bg-gray-400 text-gray-800 font-medium py-2 px-4 rounded-md transition-colors">
          Close
        </button>
        <div id="approvalButtons" class="hidden space-x-2">
          <button onclick="approveRequest()" class="bg-green-600 hover:bg-green-700 text-white font-medium py-2 px-4 rounded-md transition-colors">
            Approve
          </button>
          <button onclick="disapproveRequest()" class="bg-red-600 hover:bg-red-700 text-white font-medium py-2 px-4 rounded-md transition-colors">
            Disapprove
          </button>
        </div>
      </div>
    </div>
  </div>
</div>

<!-- Edit Modal -->
<div id="editModal" class="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full z-[9999]" style="display: none; position: fixed !important; top: 0 !important; left: 0 !important; right: 0 !important; bottom: 0 !important;">
  <div class="relative top-20 mx-auto p-5 border w-11/12 md:w-3/4 lg:w-1/2 shadow-lg rounded-md bg-white" style="position: relative !important;">
    <div class="mt-3">
      <div class="flex items-center justify-between mb-4">
        <h3 class="text-lg font-medium text-gray-900">Edit Purchase Request</h3>
        <button onclick="closeEditModal()" class="text-gray-400 hover:text-gray-600">
          <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
          </svg>
        </button>
      </div>
      
      <form id="editForm" class="space-y-4">
        <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-1">Requester</label>
            <input type="text" id="editRequester" class="w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-2 focus:ring-red-500 focus:border-transparent">
          </div>
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-1">Department</label>
            <select id="editDepartment" class="w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-2 focus:ring-red-500 focus:border-transparent">
              <option value="Engineering">Engineering</option>
              <option value="Operations">Operations</option>
              <option value="Maintenance">Maintenance</option>
              <option value="IT">IT</option>
              <option value="Finance">Finance</option>
              <option value="HR">HR</option>
              <option value="Sales">Sales</option>
              <option value="Marketing">Marketing</option>
            </select>
          </div>
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-1">Items</label>
            <input type="text" id="editItems" class="w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-2 focus:ring-red-500 focus:border-transparent">
          </div>
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-1">Estimated Cost</label>
            <input type="number" id="editEstimatedCost" class="w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-2 focus:ring-red-500 focus:border-transparent">
          </div>
        </div>
        
        <div class="flex items-center justify-end space-x-3 mt-6">
          <button type="button" onclick="closeEditModal()" class="bg-gray-300 hover:bg-gray-400 text-gray-800 font-medium py-2 px-4 rounded-md transition-colors">
            Cancel
          </button>
          <button type="submit" class="bg-red-600 hover:bg-red-700 text-white font-medium py-2 px-4 rounded-md transition-colors">
            Update Request
          </button>
        </div>
      </form>
    </div>
  </div>
</div>

<!-- Delete Modal -->
<div id="deleteModal" class="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full z-[9999]" style="display: none; position: fixed !important; top: 0 !important; left: 0 !important; right: 0 !important; bottom: 0 !important;">
  <div class="relative top-20 mx-auto p-5 border w-96 shadow-lg rounded-md bg-white" style="position: relative !important;">
    <div class="mt-3 text-center">
      <div class="mx-auto flex items-center justify-center h-12 w-12 rounded-full bg-red-100 mb-4">
        <svg class="h-6 w-6 text-red-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.34 16.50c-.77.833.192 2.5 1.732 2.5z"></path>
        </svg>
      </div>
      <h3 class="text-lg font-medium text-gray-900 mb-2">Delete Purchase Request</h3>
      <p class="text-sm text-gray-500 mb-6">Are you sure you want to delete this purchase request? This action cannot be undone.</p>
      
      <div class="flex items-center justify-center space-x-3">
        <button onclick="closeDeleteModal()" class="bg-gray-300 hover:bg-gray-400 text-gray-800 font-medium py-2 px-4 rounded-md transition-colors">
          No, Cancel
        </button>
        <button onclick="confirmDelete()" class="bg-red-600 hover:bg-red-700 text-white font-medium py-2 px-4 rounded-md transition-colors">
          Yes, Delete
        </button>
      </div>
    </div>
  </div>
</div>

<script>
// Purchase Order Modal Functionality
document.addEventListener('DOMContentLoaded', function() {
  // Sample data for demonstration (in real app, this would come from the server)
  const purchaseRequestsData = [
    {
      id: 1,
      requester: "John Doe",
      department: "Engineering",
      items: "Electrical Equipment",
      estimated_cost: 50000,
      status: "Pending",
      created_at: "2024-01-15"
    },
    {
      id: 2,
      requester: "Jane Smith",
      department: "Operations",
      items: "Safety Equipment",
      estimated_cost: 25000,
      status: "Approved",
      created_at: "2024-01-14"
    },
    {
      id: 3,
      requester: "Mike Johnson",
      department: "Maintenance",
      items: "Tools and Supplies",
      estimated_cost: 15000,
      status: "Rejected",
      created_at: "2024-01-13"
    }
  ];
  
  // Modal functionality
  let currentRequestId = null;
  
  // Test function to check if modals exist
  window.testModals = function() {
    const viewModal = document.getElementById('viewModal');
    const editModal = document.getElementById('editModal');
    const deleteModal = document.getElementById('deleteModal');
    
    console.log('Modal elements found:', {
      viewModal: viewModal,
      editModal: editModal,
      deleteModal: deleteModal
    });
    
    if (viewModal) {
      console.log('View modal display style:', viewModal.style.display);
      console.log('View modal classes:', viewModal.className);
      console.log('View modal computed style:', window.getComputedStyle(viewModal).display);
    }
    
    alert('Check console for modal element details');
  };
  
  // View Modal Functions
  window.openViewModal = function(requestId) {
    console.log('openViewModal called with ID:', requestId);
    currentRequestId = requestId;
    const request = purchaseRequestsData.find(r => r.id === requestId);
    console.log('Found request:', request);
    if (request) {
      const modal = document.getElementById('viewModal');
      const content = document.getElementById('viewModalContent');
      const approvalButtons = document.getElementById('approvalButtons');
      
      console.log('Modal elements found:', { modal, content, approvalButtons });
      
      if (!modal) {
        console.error('View modal element not found!');
        alert('View modal element not found!');
        return;
      }
      
      // Check modal properties
      console.log('Modal before changes:', {
        display: modal.style.display,
        visibility: modal.style.visibility,
        opacity: modal.style.opacity,
        position: modal.style.position,
        zIndex: modal.style.zIndex,
        classes: modal.className,
        computedStyle: window.getComputedStyle(modal)
      });
      
      // Populate modal content
      content.innerHTML = `
        <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-1">Request ID</label>
            <p class="text-sm text-gray-900">#${request.id}</p>
          </div>
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-1">Status</label>
            <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${
              request.status === 'Pending' ? 'bg-yellow-100 text-yellow-800' :
              request.status === 'Approved' ? 'bg-green-100 text-green-800' :
              'bg-red-100 text-red-800'
            }">${request.status}</span>
          </div>
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-1">Requester</label>
            <p class="text-sm text-gray-900">${request.requester}</p>
          </div>
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-1">Department</label>
            <p class="text-sm text-gray-900">${request.department}</p>
          </div>
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-1">Items</label>
            <p class="text-sm text-gray-900">${request.items}</p>
          </div>
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-1">Estimated Cost</label>
            <p class="text-sm text-gray-900">₱${request.estimated_cost.toLocaleString()}</p>
          </div>
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-1">Created Date</label>
            <p class="text-sm text-gray-900">${request.created_at}</p>
          </div>
        </div>
      `;
      
      // Show approval buttons only for pending requests (simulating approver role)
      if (request.status === 'Pending') {
        approvalButtons.classList.remove('hidden');
      } else {
        approvalButtons.classList.add('hidden');
      }
      
      // Show the modal with multiple approaches
      modal.style.display = 'block';
      modal.style.visibility = 'visible';
      modal.style.opacity = '1';
      modal.style.position = 'fixed';
      modal.style.top = '0';
      modal.style.left = '0';
      modal.style.right = '0';
      modal.style.bottom = '0';
      modal.style.zIndex = '9999';
      
      console.log('Modal after changes:', {
        display: modal.style.display,
        visibility: modal.style.visibility,
        opacity: modal.style.opacity,
        position: modal.style.position,
        zIndex: modal.style.zIndex
      });
      
      // Force a reflow
      modal.offsetHeight;
      
      console.log('Modal should now be visible');
      console.log('Modal display style:', modal.style.display);
      console.log('Modal classes:', modal.className);
      
      // Check if modal is actually visible
      const rect = modal.getBoundingClientRect();
      console.log('Modal bounding rect:', rect);
      console.log('Modal is visible:', rect.width > 0 && rect.height > 0);
    }
  };
  
  window.closeViewModal = function() {
    console.log('closeViewModal called');
    const modal = document.getElementById('viewModal');
    modal.style.display = 'none';
    currentRequestId = null;
  };
  
  // Edit Modal Functions
  window.openEditModal = function(requestId) {
    console.log('openEditModal called with ID:', requestId);
    currentRequestId = requestId;
    const request = purchaseRequestsData.find(r => r.id === requestId);
    if (request) {
      const modal = document.getElementById('editModal');
      
      // Populate form fields
      document.getElementById('editRequester').value = request.requester;
      document.getElementById('editDepartment').value = request.department;
      document.getElementById('editItems').value = request.items;
      document.getElementById('editEstimatedCost').value = request.estimated_cost;
      
      // Show the modal with forceful styling
      modal.style.display = 'block';
      modal.style.visibility = 'visible';
      modal.style.opacity = '1';
      modal.style.position = 'fixed';
      modal.style.top = '0';
      modal.style.left = '0';
      modal.style.right = '0';
      modal.style.bottom = '0';
      modal.style.zIndex = '9999';
      console.log('Edit modal should now be visible');
    }
  };
  
  window.closeEditModal = function() {
    console.log('closeEditModal called');
    const modal = document.getElementById('editModal');
    modal.style.display = 'none';
    currentRequestId = null;
  };
  
  // Delete Modal Functions
  window.openDeleteModal = function(requestId) {
    console.log('openDeleteModal called with ID:', requestId);
    currentRequestId = requestId;
    const modal = document.getElementById('deleteModal');
    modal.style.display = 'block';
    modal.style.visibility = 'visible';
    modal.style.opacity = '1';
    modal.style.position = 'fixed';
    modal.style.top = '0';
    modal.style.left = '0';
    modal.style.right = '0';
    modal.style.bottom = '0';
    modal.style.zIndex = '9999';
    console.log('Delete modal should now be visible');
  };
  
  window.closeDeleteModal = function() {
    console.log('closeDeleteModal called');
    const modal = document.getElementById('deleteModal');
    modal.style.display = 'none';
    currentRequestId = null;
  };
  
  // Action Functions
  window.approveRequest = function() {
    if (currentRequestId) {
      // In a real app, this would make an API call to update the status
      alert(`Purchase Request #${currentRequestId} has been approved!`);
      closeViewModal();
      // Refresh the page or update the UI
      location.reload();
    }
  };
  
  window.disapproveRequest = function() {
    if (currentRequestId) {
      // In a real app, this would make an API call to update the status
      alert(`Purchase Request #${currentRequestId} has been disapproved!`);
      closeViewModal();
      // Refresh the page or update the UI
      location.reload();
    }
  };
  
  window.confirmDelete = function() {
    if (currentRequestId) {
      // In a real app, this would make an API call to delete the request
      alert(`Purchase Request #${currentRequestId} has been deleted!`);
      closeDeleteModal();
      // Refresh the page or update the UI
      location.reload();
    }
  };
  
  // Handle edit form submission
  document.getElementById('editForm')?.addEventListener('submit', function(e) {
    e.preventDefault();
    if (currentRequestId) {
      // In a real app, this would make an API call to update the request
      const formData = {
        requester: document.getElementById('editRequester').value,
        department: document.getElementById('editDepartment').value,
        items: document.getElementById('editItems').value,
        estimated_cost: parseFloat(document.getElementById('editEstimatedCost').value)
      };
      
      alert(`Purchase Request #${currentRequestId} has been updated!`);
      closeEditModal();
      // Refresh the page or update the UI
      location.reload();
    }
  });
  
  // Close modals when clicking outside
  window.addEventListener('click', function(e) {
    const viewModal = document.getElementById('viewModal');
    const editModal = document.getElementById('editModal');
    const deleteModal = document.getElementById('deleteModal');
    
    if (e.target === viewModal) {
      closeViewModal();
    }
    if (e.target === editModal) {
      closeEditModal();
    }
    if (e.target === deleteModal) {
      closeDeleteModal();
    }
  });
  
  console.log('Purchase Order Modals JavaScript loaded successfully!');
});
</script>
